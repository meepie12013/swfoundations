{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"JamieSmith - Strings Workshop","provenance":[{"file_id":"1OBhGecx9aP1l4TrzxF1N9Xz1FLFL3Dky","timestamp":1599692385688}],"collapsed_sections":["dW1UkkLCae9l","3EEbRmTZmk5E","5lJwfLh5oM1s","Uyv5x5ehGVM3","s8TnkYiyl-I-","XXCaQVuf16gD"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"uuMXeHFq9bZO","colab_type":"text"},"source":["<h1>Strings</h1>\n","\n","Despite being one of the most important types of data that there are, strings are treated very uniquely compared to a lot of other data. As we mentioned in lecture, instead of using operators, there are a large number of **string functions** that let you play with them.\n","\n","Even though we talked about them earlier, the best way to get a feel for them is to try them out, and see what they do. Before we start our exercises, we'll take a closer look at a couple of the more useful string functions."]},{"cell_type":"markdown","metadata":{"id":"UA6kFSyL-zvC","colab_type":"text"},"source":["# Functions _of_ Strings\n","\n","In the functions lecture, we primarily passed variables into a function as a parameter. However, we very briefly covered functions that can only be called on specific data types. We can call these functions **members of an object**. \n","\n","So what are objects, you might be wondering? The full answer could make up a topic of it's own, but for the sake of this course the only thing you need to know is that an object is a data type with special/unique functionality. \n","\n","This \"unique functionality\" comes in the form of these special functions like `capitalize()` and `isdigit()` that need to be called after an object's name and a period. The reason they're designed this way is that these functions wouldn't work properly on other object types. Normal functions like `len()` account for multiple data types, so they're called using traditional Python syntax."]},{"cell_type":"markdown","metadata":{"id":"pqj0WLpp-AW3","colab_type":"text"},"source":["# Editing"]},{"cell_type":"markdown","metadata":{"id":"v1QNNV6VFPYm","colab_type":"text"},"source":["## `replace()`\n","\n","Every time a given substring is found in the string, it is replaced with something else. The first parameter is the string you're looking for, and the second parameter is what you want to replace it with."]},{"cell_type":"code","metadata":{"id":"5ukfMKguFRi2","colab_type":"code","colab":{}},"source":["text = \"I don't know what I don't know\"\n","text.replace(\"know\", \"understand\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Is-KUq-M-hLw","colab_type":"text"},"source":["## `capitalize()`\n","\n","If the first character is a string, then it will be converted into it's upper case equivalent."]},{"cell_type":"code","metadata":{"id":"Rb49G7Aq9UYZ","colab_type":"code","colab":{}},"source":["text = \"february\"\n","print(text.capitalize())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0a9kWnnb_Wn-","colab_type":"text"},"source":["## `lower()`\n","\n","Converts EVERY letter to it's *lower case* equivalent."]},{"cell_type":"code","metadata":{"id":"V10lv1H0_iq8","colab_type":"code","colab":{}},"source":["text = \"HElLo\"\n","print(text.lower())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"EU1wckaC_u-4","colab_type":"text"},"source":["## `upper()`\n","\n","Converts EVERY letter to it's *upper case* equivalent."]},{"cell_type":"code","metadata":{"id":"x_LJaCtS_2Mn","colab_type":"code","colab":{}},"source":["text = \"oh really\"\n","print(text.upper())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XqhZI9v2B40B","colab_type":"text"},"source":["# Searching\n","\n","Sometimes, we want to find something inside of a string, other than substrings and slicing. Here are some ways to do that."]},{"cell_type":"markdown","metadata":{"id":"hCxP4xaYAAgS","colab_type":"text"},"source":["## `find()`\n","\n","Find the first occurance of a substring inside of a string. Returns as an integer."]},{"cell_type":"code","metadata":{"id":"KLk9WIu4AJGc","colab_type":"code","colab":{}},"source":["text = \"We are going to learn a lot about data!\"\n","print(text.find(\"learn\"))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"pWpRsEvLiU_Z","colab_type":"text"},"source":["You can use `find()` to get the first word in a string by combining it with slicing notation, like so:"]},{"cell_type":"code","metadata":{"id":"Uzm0f69BideM","colab_type":"code","colab":{}},"source":["text = \"We are going to learn a lot about data!\"\n","\n","# Get the index of the first space between words\n","space = text.find(\" \")\n","\n","# Grab the first word by taking the substring from index 0 to the index of the first space\n","word = text[0:space]\n","\n","print(word)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"UMX2hoq4qD74","colab_type":"text"},"source":["Additionally, if `find()` **cannot** find a given substring, it returns -1."]},{"cell_type":"markdown","metadata":{"id":"PkBkmhQHCSk5","colab_type":"text"},"source":["## `rfind()`\n","\n","Find the _last_ occurange of a substring inside of a string. Returns as an integer."]},{"cell_type":"code","metadata":{"id":"42DrFf_VCYZA","colab_type":"code","colab":{}},"source":["text = \"We are going to learn about other people learn data science!\"\n","print(text.rfind(\"learn\"))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_Lm_eZnVDOi0","colab_type":"text"},"source":["# Determining\n","\n","When we learn about decision making, it's very important to look at strings and be able to evaluate facts about them. For now, let's cover those functions. They all return booleans."]},{"cell_type":"markdown","metadata":{"id":"UdDUDHONBg9G","colab_type":"text"},"source":["## `endswith()`\n","\n","Returns `True` if the string ends with the value in the parameter."]},{"cell_type":"code","metadata":{"id":"1QR9j7bjBqv5","colab_type":"code","colab":{}},"source":["text = \"Mixed Berry\"\n","isBerry = text.endswith(\"Berry\")\n","print(isBerry)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0dCfPAcWDuMt","colab_type":"text"},"source":["## `isalpha()`\n","\n","Returns `True` if every character is an alphabetic letter."]},{"cell_type":"code","metadata":{"id":"_klxo0fcDgj3","colab_type":"code","colab":{}},"source":["text = \"AllLetters\"\n","print(text.isalpha())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SXu90vZ7D-Fw","colab_type":"text"},"source":["## `isalnum()`\n","\n","Returns `True` if every character is an alphanumeric character."]},{"cell_type":"code","metadata":{"id":"gk9-N4USELPy","colab_type":"code","colab":{}},"source":["text = \"AllLettersAndNumb3rs\"\n","print(text.isalnum())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oiqbyCY0EJ92","colab_type":"text"},"source":["## `isdigit()`\n","\n","Returns `True` if the string is entirely made up of digits"]},{"cell_type":"code","metadata":{"id":"pTg4l-9lEW7z","colab_type":"code","colab":{}},"source":["text = \"43110\"\n","print(text.isdigit())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rTStlXYyFVzh","colab_type":"text"},"source":["# A Note about Substrings\n","\n","If you want the first letter in a string, you would type `[0]` after the string. That makes sense, right? Well, what if you want to grab the first three letters? We want the first letter to the third letter, so 0 -> 2. Let's give it a try the common sense way."]},{"cell_type":"code","metadata":{"id":"VKeJLsKpF-Cw","colab_type":"code","colab":{}},"source":["text = \"caterpillar\"\n","print(text[0:2])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9z0XycK2GEzt","colab_type":"text"},"source":["If you ran that, you'd notice that the text is cut off at the end. What gives!\n","\n","When getting substrings, the starting value is *inclusive* and the ending value is *exclusive*. Keep this in mind when working with substrings!"]},{"cell_type":"markdown","metadata":{"id":"dafSYQjYGRDO","colab_type":"text"},"source":["# Exercises\n","\n","String Functions. Operators. Binary. We've covered a TON about variables today. Let's see what you remember!\n","\n","Make sure to reference the handout, as well as the workshop and of course, the instructor."]},{"cell_type":"markdown","metadata":{"id":"dW1UkkLCae9l","colab_type":"text"},"source":["## Warm Up \n","\n","1. Run the code below and notice what happens. Everything should work as expected.\n","2. Replace the sequence `words` on line 10 with `sentence`. Then run the code. *Did it do what you expected it to?*\n"," * Notice that, instead of printing each word on it's own line, it printed each **character** on it's own line.\n"," * It also ran 43 iterations of the loop. Each iteration was for an individual character.\n"," * It didn't matter that the loop variable is called `word`. The name is arbitrary to what is actually in it, but was chosen for the context it gave originally.\n","3. Undo the change made to line 10, by replacing `sentence` with `words`.\n","4. Remove the blue `f` from line 6. Run the program and see what happens.\n"," * Without the `f`, it's just a normal string, and it treats all characters as normal text. If you forget an `f` on your string, this'll happen.\n","5. Fix the change to line 6 by adding an `f` between `print(` and `\"There`\n","\n"]},{"cell_type":"code","metadata":{"id":"ssB9Ec4Hah9S","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":170},"executionInfo":{"status":"ok","timestamp":1599695493603,"user_tz":240,"elapsed":368,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"fca61517-6c84-4e21-8fcb-764e81d4b263"},"source":["# Break the string into individual words\n","sentence = \"Greetings always followed by sweet goodbyes\"\n","words = sentence.split(' ')\n","\n","# Print the number of words\n","print(f\"There are {len(words)} words in that sentence.\")\n","\n","# Keep track of the number of iterations\n","iterations = 0\n","\n","# Print the individual words\n","print(\"They are:\")\n","for word in words:\n","  print(word)\n","  iterations += 1\n","\n","print(f\"There were {iterations} iterations of the loop.\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["There are 6 words in that sentence.\n","They are:\n","Greetings\n","always\n","followed\n","by\n","sweet\n","goodbyes\n","There were 6 iterations of the loop.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3EEbRmTZmk5E","colab_type":"text"},"source":["## 1. Counting the Stars\n","\n","We're going to create a very simple program that displays the number of times the word \"stars\" appears in the variable `starText`.\n","\n","A successful solution should output this:\n","\n","```\n","I found the word stars 2 times\n","```\n","\n"]},{"cell_type":"code","metadata":{"id":"hkNXt57Jn57P","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1599692652665,"user_tz":240,"elapsed":416,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"5739b91e-8ca5-48e7-dd34-23427952b492"},"source":["starText = \"I wonder how many stars there are in the sky. Maybe one day I can travel to the stars myself!\"\n","# Break the string into individual words\n","words = starText.split(' ')\n","\n","# Keep track of the number of iterations\n","iterations = 0\n","\n","for word in words:\n","  if word == \"stars\":\n","    iterations += 1\n","\n","print(\"There were\", iterations, \"times the word STARS appeared in the following sentence:\")\n","print(starText)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["There were 2 times the word STARS appeared in the following sentence:\n","I wonder how many stars there are in the sky. Maybe one day I can travel to the stars myself!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"5lJwfLh5oM1s","colab_type":"text"},"source":["## 2. Flip Flop\n","\n","Let's create a program that takes in text from the user, and prints out each word on it's own line.\n","\n","The twist is that every other word should be **reversed**.\n","\n","Here's what a successful solution should output for the following example input:\n","\n","```\n","Enter Text: Hello My Friend\n","Hello\n","yM\n","Friend\n","```"]},{"cell_type":"code","metadata":{"id":"f63vPWWornJL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1599695709883,"user_tz":240,"elapsed":5035,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"8ef7f93d-bbef-4c13-baee-48b9b9641c27"},"source":["mainText = input(\"Enter Text: \")\n","# Break the string into individual words\n","words = mainText.split(' ')\n","\n","#figure out how to tell the location of the word\n","for word in words:\n","  if (words.index(word) % 2) == 0:    #targeting every other word\n","    print(word)\n","  else:\n","    print(word[::-1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter Text: Hello My Friend\n","Hello\n","yM\n","Friend\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9mrD9NQEM_Gm","colab_type":"text"},"source":["## 3. Opposite Day\n","\n","Happy Opposite Day! Or unhappy opposite day?\n","\n","Either way, let's greet a user in a silly way today. Here's what your program should do:\n","\n","* Ask the user for their first and last name as a **single** input\n","* Print a message with the following format: `Hello [last name] [first name]! Or should I say, [first name, but reversed] [last name, but reversed]`\n","\n","Here's what a successful solution should output:\n","\n","```\n","Enter First and Last Name: Donald Duck\n","Hello Duck Donald! Or should I say, dlanoD kcuD?\n","```"]},{"cell_type":"code","metadata":{"id":"5185OnphNm3A","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1599701546363,"user_tz":240,"elapsed":2450,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"bf992232-d4d5-4ed1-9a07-a417279b2b64"},"source":["FullName = input(\"Enter First and Last Name: \")\n","#separate into words\n","words = FullName.split(' ')\n","words = words[::-1]\n","\n","#printing both backwards\n","print(f\"Hello {words}! Or should I say, {FullName[::-1]}?\")\n","\n","#i don't know how to make it print w/out quotes~"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter First and Last Name: Jamie Smith\n","Hello ['Smith', 'Jamie']! Or should I say, htimS eimaJ?\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Uyv5x5ehGVM3","colab_type":"text"},"source":["## 4. Detective Duty\n","\n","I want to create a program that takes in and determines different characteristics of a string. Specifically,  when the user enters a value for `text`, I would like four different checks to happen:\n","\n","* Whether the string contains only digits\n","* Whether the string contains only letters\n","* Whether the _first word_ in the string contains only letters\n","* Whether the _last word_ in the string contains only digits\n","\n","Here's what a successful solution should output given the following input:\n","\n","```\n","Enter some text: Hello my number is 2134\n","This string does NOT contain only digits\n","This string does NOT contain only letters\n","The first word DOES contain only letters\n","The last word DOES contain only letters\n","```"]},{"cell_type":"code","metadata":{"id":"VYNCr6QUHoKP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1599745755159,"user_tz":240,"elapsed":14243,"user":{"displayName":"Thomas Cain","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gg80YGXqHb0q53OioQyZhCAvaJa55A1ZmHfPD13sA=s64","userId":"08290924317717847279"}},"outputId":"a3865660-397f-4bc3-f407-4235e764aa3e"},"source":["text = input(\"Enter some text: \")\n","words = text.split(' ')\n","text = text.replace(\" \", \"\")  #I don't want to count spaces as letters nor digits\n","digitCounter = 0  #keep track of digits\n","FirstCounter = 0\n","LastCounter = 0\n","\n","#my returns\n","StringDigits = \"This string does 1contain only digits\"\n","StringLetters = \"This string does 1contain only letters\"\n","FirstLetters = \"The first word does 1contain only letters\"\n","LastDigits = \"The last word does 1contain only digits\"\n","\n","#I'm definitely over-complicating this I think\n","\n","for char in text:      #getting the whole string\n","  if char.isdigit():\n","    digitCounter += 1\n","\n","for char in words[0]:  #getting the first word\n","  if char.isdigit():\n","    FirstCounter += 1\n","\n","for char in words[-1]:  #getting the last word\n","  if char.isdigit():\n","    LastCounter += 1\n","\n","# Display if the entire string contains only digits here\n","if digitCounter == len(text):\n","  StringDigits = StringDigits.replace(\"1\", \"\")\n","else:\n","  StringDigits = StringDigits.replace(\"1\", \"NOT \")\n","print(StringDigits)\n","\n","# Display if the entire string contains only letters here\n","if digitCounter == 0:\n","  StringLetters = StringLetters.replace(\"1\", \"\")\n","else:\n","  StringLetters = StringLetters.replace(\"1\", \"NOT \")\n","print(StringLetters)\n","\n","# Display whether the FIRST WORD in the string contains only letters here\n","if FirstCounter == 0:\n","  FirstLetters = FirstLetters.replace(\"1\", \"\")\n","else:\n","  FirstLetters = FirstLetters.replace(\"1\", \"NOT \")\n","print(FirstLetters)\n","\n","# Display whether the LAST WORD in the string contains only digits here\n","if LastCounter == len(words[-1]):\n","  LastDigits = LastDigits.replace(\"1\", \"\")\n","else:\n","  LastDigits = LastDigits.replace(\"1\", \"NOT \")\n","print(LastDigits)\n","\n","#tada\n","#HOWEVER in this case \"letters\" means \"anything not a digit or a space\"\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Enter some text: 364 days till my next birthday\n","This string does NOT contain only digits\n","This string does NOT contain only letters\n","The first word does NOT contain only letters\n","The last word does NOT contain only digits\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s8TnkYiyl-I-","colab_type":"text"},"source":["## 5. Looking for Letters\n","\n","We're going to tie together all of the concepts we've practiced so far in this course by creating an application that does the following:\n","\n","* Takes in a string from the user\n","* Asks the user to enter a single character to search the string for\n","* Goes through the string and **counts _all_** occurances of that character in the string.\n","* Displays the number of times it found that character\n","* Asks the user if they'd like to **repeat** this process, by looking for another character in the string.\n"," * It should use the same string that was initially entered, but allow the user to search for a new character.\n","\n","It will take all of the concepts we've learned so far to solve this problem!\n","\n","Here is what a successful solution should look like:\n","\n","```\n","Please enter a string: Hello there!\n","Please enter a character to search for: l\n","l was found 2 times\n","Would you like to search for another character in this string? Yes\n","Please enter a character to search for: z\n","z was found 0 times\n","Would you like to search for another character in this string? No\n","Good bye!\n","```\n","\n","TIP: Think about which type of loop you'll need to go _through_ the string, and which type you'll need to determine whether or not to _repeat_ the process\n","\n","NOTE: You do _not_ need to do input validation\n","\n"]},{"cell_type":"markdown","metadata":{"id":"XXCaQVuf16gD","colab_type":"text"},"source":["## CHALLENGE: Case Closed\n","\n","Modify your program from problem 5 to be _case insensitive_. Meaning, if I type in the string \"Hello there!\" and I search for the letter \"E\", it will ALSO return any results for \"e\".\n","\n","In other words, when a letter is entered, it will find all instances of both the upper and lower case version of that letter."]},{"cell_type":"code","metadata":{"id":"nZh0fTQUnT_5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"error","timestamp":1599712495889,"user_tz":240,"elapsed":1821368,"user":{"displayName":"Sharif Hall","photoUrl":"","userId":"02632289036240546727"}},"outputId":"c32b2a38-8fd1-4e61-d0ac-9b11e9a29faa"},"source":["SearchCounter = 0  #keep track of searches\n","KeepGoing = \"Yes\"\n","\n","text = input(\"Enter some text: \")\n","\n","while (KeepGoing == \"Yes\"):\n","  SearchCounter = 0  #reset\n","  Search = input(\"Please enter a character to search for: \")\n","  for char in text:\n","    if char == Search:\n","      SearchCounter += 1\n","  print(f\"{Search} was found {SearchCounter} times\")\n","  KeepGoing = input(\"Would you like to search for another character in this string?\")\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    490\u001b[0m         \"\"\"\n\u001b[0;32m--> 491\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-cce1a16b5316>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mKeepGoing\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Yes\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Enter some text: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mKeepGoing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"Yes\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    702\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 704\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    705\u001b[0m         )\n\u001b[1;32m    706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"zqpShFGP16pJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1599701393013,"user_tz":240,"elapsed":16868,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"bfe69fcd-cec1-4c4e-dffa-64e9ede6abde"},"source":["SearchCounter = 0  #keep track of searches\n","KeepGoing = \"Yes\"\n","\n","text = input(\"Enter some text: \")\n","text = text.lower()\n","\n","while (KeepGoing == \"Yes\"):\n","  SearchCounter = 0  #reset\n","  Search = input(\"Please enter a character to search for: \")\n","  Search = Search.lower()\n","  for char in text:\n","    if char == Search:\n","      SearchCounter += 1\n","  Search = Search.upper()  #it looks better like this ( ͡° ͜ʖ ͡°)\n","  print(f\"{Search} was found {SearchCounter} times\")\n","  KeepGoing = input(\"Would you like to search for another character in this string?\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Enter some text: Everyday Things Happen every Day\n","Please enter a character to search for: d\n","D was found 2 times\n","Would you like to search for another character in this string?Yes\n","Please enter a character to search for: e\n","E was found 5 times\n","Would you like to search for another character in this string?No\n"],"name":"stdout"}]}]}