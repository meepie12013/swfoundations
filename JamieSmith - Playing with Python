{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"JamieSmith - Playing with Python","provenance":[{"file_id":"1e8WidFwJU3OSgH174nx7fbuL0V5Ng1cu","timestamp":1598920690907}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"e9dDlzl-xUml","colab_type":"text"},"source":["<h1>Welcome to \"Intro to Programming\"!</h1>\n","\n","You're about to take your first steps into the world of Computer Programming! \n","\n","Today will be very simple, as we're just going to go over what we covered in lecture, and learn about Python and the Workshops.\n","\n","If you have <i>any</i> questions during a workshop, please raise your hand and ask a question! I'd be more than happy to help you out."]},{"cell_type":"markdown","metadata":{"id":"cX6MldBl4Luj","colab_type":"text"},"source":["# Workshop Basics\n","After every lecture, we'll spend time in class going through a <b>workshop</b> just like this one. You can think of a workshop as a \"guided assignment\", where you'll do a mix of learning new material, reading and writing small fragments of code, and fixing code that is not outputting correctly."]},{"cell_type":"markdown","metadata":{"id":"sFRMI3BBEjM1","colab_type":"text"},"source":["## FAQ\n","<h3>What is Google Colab?</h3>\n","As a programmer, you write code in an <b>environment</b>, which is another way to talk about the context in which you're creating and executing code. Google Colab is an environment that lets you run snippets of code inside a document, and lets you make guided assignments like these! All of your workshops will be done in Google Colab.\n","\n","<h3>How are they graded?</h3>\n","Each workshop is graded for completion. The material on a workshop can differ slightly from what's covered in lecture, so it's important to do your best and take your time with them.\n","\n","<h3>How do I submit my workshop?</h3>\n","In Google Colab, your \"runtime\" (another way to talk about the edits you've made to a notebook) are not saved. When you're finished with the exercises at the end of the workshop, raise your hand to get it spot-checked. If everything looks good and you don't have anymore questions, you may leave when it's been checked."]},{"cell_type":"markdown","metadata":{"id":"VDkFWAt4I2zN","colab_type":"text"},"source":["## Testing Code\n","Pieces of code are inside of \"code cells\". You are free to add, change, or delete any code inside of the cell just like you would normally. To test code, <b>click the cell and then press the play button</b> that pops up. Depending on the complexity of the code, it may take a minute for the result to show up.\n","\n","<center><img src=\"https://docs.google.com/uc?export=download&id=1Jr8S7p2xERP7GucgEwQyrlTHjkTqr668\" hspace=\"0px\" vspace=\"0px\"></center>\n","\n","Below is a simple piece of code - why don't you try running it and seeing what the result is?"]},{"cell_type":"code","metadata":{"id":"mkGz9pQwJz_i","colab_type":"code","colab":{}},"source":["1 + 90"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"i1tvijs5KIsb","colab_type":"text"},"source":["If everything went smoothly, you should see the number 91 below the code! <b>If you are having trouble getting this to happen, please raise your hand!</b> This is an important concept to complete the rest of the workshops.\n","\n","Once you've run a code cell, you can re-run it by pressing the play button again. If you make changes to the code inside the cell, you'll get a different outcome!"]},{"cell_type":"markdown","metadata":{"id":"lfecZRqH1Bdg","colab_type":"text"},"source":["# What is Python?\n","Python is one of the world's leading programming languages. It's also one of the best languages for beginners, because it lets us focus on the concepts instead of the syntax. \n","\n","All of the code we will be writing and using in this course, including in our workshops, will be Python. However, the concepts that we're working with are found in most languages.\n","\n","We've spent a lot of time today talking about Python, so I think it's time we jumped in and played with some for ourselves!"]},{"cell_type":"markdown","metadata":{"id":"9K5q7O9WKm86","colab_type":"text"},"source":["# Start a Conversation\n","One of the easiest things to do in programming is print a message to the screen. In fact, it's so easy, it's even considered a right of passage for a programmer to create a program that prints \"Hello World\" - so that's where we'll start!"]},{"cell_type":"markdown","metadata":{"id":"6jo8-CUcOEWo","colab_type":"text"},"source":["## \"Hello World!\"\n","\n","Here's an example of the famous \"hello world\" program. Run it and see what happens!"]},{"cell_type":"code","metadata":{"id":"TqMHwVS62wzi","colab_type":"code","colab":{}},"source":["print(\"Hello World!\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"flWzIhyhL0a3","colab_type":"text"},"source":["If everything worked, it should have printed \"Hello World!\" right back at you. Now, why don't you put your own spin on it? Print a greeting of your own below (just keep it professional!)"]},{"cell_type":"code","metadata":{"id":"2-gMpWf1xO6K","colab_type":"code","colab":{}},"source":["print()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"J4YMTUQULK8a","colab_type":"text"},"source":["When you run your code cell, it should print the message you typed right back out at you. If it did - **congratulations**! You've just written your first piece of code!\n","\n","<i>(If you got an error that says \"NameError: name ... is not defined\", make sure your greeting is inside quotation marks and parenthesis like so:</i> `print(\"Greeting Goes Here\")` <i>)</i>\n","\n","<i>(If you get an error that says \"Invalid Syntax\", you might have multiple words not in quotation marks!</i>"]},{"cell_type":"markdown","metadata":{"id":"jb_AxhFmMngZ","colab_type":"text"},"source":["## The `print()` function\n","\"Hello World\" - a simple one line program. Now that we've written it, how does it work?\n","\n","The backbone of the program is an instruction called `print()`. This type of instruction is called a **function**. We'll cover the ins-and-outs of functions in a later lecture, but what you need to know for now is that functions:\n","* Do an action\n","* Sometimes take a value as input, which is passed inside of it's parentheses\n","\n","Using this simple criteria, let's breakdown the `print()` function.\n","* What does it do? \n","   * **It prints a value to the screen**\n","* What does it take as input? \n","   * **The message you want it to display**\n","\n","You may have also noticed that the greeting is wrapped in quotation marks. These signify that the words inside of the quotation marks should **be treated as text**, and not as instructions for Python to run. \n","\n","For example, Python treats `print` differently from `\"print\"`. The former refers to the function that prints text to the screen, and the latter is just text for the word \"print\"."]},{"cell_type":"markdown","metadata":{"id":"RKhYgISciJCJ","colab_type":"text"},"source":["# Multiple Messages\n","\n","Sometimes, we want to print more than one message to the screen at a time, as a sentence. Luckily, `print()` has an easy way to do this!\n","\n","`print()` can take **more than one parameter**, where each parameter represents something that will be printed to the screen. Each parameter will be printed with a space separating them.\n","\n","You might be wondering how to pass in multiple parameters - let's look at how it's done! Run the code below and see what happens."]},{"cell_type":"code","metadata":{"id":"omxrwjDkip2L","colab_type":"code","colab":{}},"source":["print(\"Hello\",\"there\",\"programmer!\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qt5wuNlKiwBp","colab_type":"text"},"source":["As you can see, we pass in multiple parameters with commas in-between them. Each individual prompt we'd like to display are wrapped in their own set of quotation marks. \n","\n","Not all functions can do this, but `print()` can."]},{"cell_type":"markdown","metadata":{"id":"MRROOmV4QY1B","colab_type":"text"},"source":["## It takes two...\n","\n","A program that only talks to you isn't very interesting - that's just a document with extra steps! \n","\n","User interaction is one of the most important qualities of a good computer program. One of the simplest ways to interact with a program is by reading what a user types into their computer. \n","\n","Let's look at how Python reads user input. Try and run this code below."]},{"cell_type":"code","metadata":{"id":"jqYz9VJ-RBe0","colab_type":"code","colab":{}},"source":["input(\"Enter your name here: \")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wLjoqZSQRrwn","colab_type":"text"},"source":["If you ran it, you should have gotten something like this on your screen:\n","\n","<center><img src=\"https://docs.google.com/uc?export=download&id=1b6aqZvlHz-h9FTo6BpILJWi9LlTFS0BS\" /></center>\n","\n","The first thing you might notice is that the play button is now spinning. This is because your program is **paused until it has received the input from the user**. \n","\n","This makes sense, because if the next line of code has something to do with the information that the user typed in, we couldn't execute it until they've finished typing it in.\n","\n","The next thing you'll notice is that there is a prompt that reads \"Enter your name here:\", with a white textbox next to it. Clicking the textbox, lets you type in your name. If you haven't already, **try typing in your name and pressing the `enter` key in the textbox prompt.**\n","\n","If done successfully, you should see the output print your name back out at you. **Normally `input()` does not do this by itself**, but since it's the only code in the cell it prints it out to you.\n","\n","<center><img src=\"https://docs.google.com/uc?export=download&id=1ZJlvNhP87ZyMVWQ5lWX2YZ-UOXuovWif\" /></center>"]},{"cell_type":"markdown","metadata":{"id":"nGFiP4A4W2Mq","colab_type":"text"},"source":["## The `input()` function\n","\n","So what does `input()` do? It's a little less straightforward than `print()`. Let's break it down just like we broke down `print()`.\n","\n","* What does it do?\n","   * **Prints a prompt to the screen, and gets the user's response to the prompt**\n","* What does it take as input?\n","   * **The prompt to display to the user**\n","\n","Just like `print()`, the parameter you pass in gets written to your program's output. However unlike `print()`, it does something more than just take in a prompt. \n","\n","Ask yourself - how do you *use* what the user typed in? Well, we need a way to **store the data** that the user typed in, temporarily."]},{"cell_type":"markdown","metadata":{"id":"bQztdVo9X5Nt","colab_type":"text"},"source":["# Dealing with Data\n","\n","What do words, numbers, and social media posts have in common? All of them are *data*.\n","\n","Simply put, data refers to anything that we need to:\n","* Store\n","* Use\n","* Keep track of\n","\n","The `input()` function creates data as well! Specifically, it **returns the word(s) that the user typed in as data** that we can use in Python. How do we grab and store this data though?"]},{"cell_type":"markdown","metadata":{"id":"ujTbwUbneLg7","colab_type":"text"},"source":["## Recap on Variables\n","\n","As we talked about in lectures, a variable can be thought of as a **box that stores some amount of data**. Variables can store many different types of data, including the words that come from the `input()` function.\n","\n","Variables are identified by their name. If you want to **change or read the value** of a variable, you use it's name.\n","\n","There are a lot of things to know about and do with variables. We'll cover variables in more depth later on."]},{"cell_type":"markdown","metadata":{"id":"acnueHPSfch0","colab_type":"text"},"source":["## Storing and Recalling Data\n","\n","Let's do a small recap. \n","\n","We have some words that the user typed in that we want to get from `input()`. We know that we should put them in a variable, and we know that we need to use the variable's name to get it again. \n","\n","So how do we do that?\n","\n","There is an instruction in Python known as **assignment**, which lets you set the value of a variable. To use it, you set up a line of code like an equation, using the equal sign (=). On the left side of the equation, you put the name of the variable you'd like to create or change the value of. On the right side of the equation, you put the value you'd like to set it to.\n","\n","This is best shown through a small piece of code. Try running the program below to see what it does:"]},{"cell_type":"code","metadata":{"id":"XEkFqN6BhLX5","colab_type":"code","colab":{}},"source":["favoriteNumber = 3\n","print(\"My favorite number is:\")\n","print(favoriteNumber)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1NtV6NwWhSDd","colab_type":"text"},"source":["As you can see, running this code sets the value of `favoriteNumber` to 3, using an equal sign to assign the value. This equal sign is called the **assignment operator**.\n","\n","You'll notice something else about that block of code though. When `favoriteNumber` was passed into print, it **recalled the value and printed it to the screen**. \n","\n","You'll also notice that, unlike when we wrote our \"Hello World\" program, we did *not* use quotation marks. This is because we are using the variable name, and not the word \"favoriteNumber\"."]},{"cell_type":"markdown","metadata":{"id":"_feQsbmbdBcf","colab_type":"text"},"source":["# Exercises\n","\n","We've covered a *lot* today - it's a lot to take in. Let's do a few practice problems to solidify what we learned today. We'll take it easy and only do a few exercises today. \n","\n","Please do each exercise in the code cell below the prompt. Some prompts may have code partially written for you, feel free to change, add, or remove code as you see fit.\n","\n","Remember, if you get stuck at any point, please raise your hand and ask for help! Everyone makes mistakes, especially when learning these concepts for the first time."]},{"cell_type":"markdown","metadata":{"id":"0sr-9k_hkBY3","colab_type":"text"},"source":["## 1. Say good bye!\n","Write a program to say good bye to the user."]},{"cell_type":"code","metadata":{"id":"Hy_R15L7kHUS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1598921300649,"user_tz":240,"elapsed":554,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"8435aa56-6f04-45a3-8f93-622f6ba79618"},"source":["print(\"Goodbye!\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Goodbye!\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KFc8RA5aYqby","colab_type":"text"},"source":["## 2. On a local scale...\n","Write a program that does the following:\n","\n","* Asks the user for their name\n","* Stores the user's name in a variable\n","* Says hello to the user\n","\n","A successful output should look something like this:\n","\n","`Please enter your name: Douglas Lueben`\n","\n","`Hello Douglas Lueben`"]},{"cell_type":"code","metadata":{"id":"eotLcaMXYveO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1598921319934,"user_tz":240,"elapsed":3894,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"8f1c2650-0f8d-4ea4-94ba-50a41b9cfe60"},"source":["#Asks the user for their name\n","name = input(\"Please enter your name: \")\n","#Stores the user's name in a variable\n","#Says hello to the user\n","print(\"Hello\",name)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Please enter your name: Jamie\n","Hello Jamie\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FY_PiyARiG06","colab_type":"text"},"source":["## 3. Presenting, your full name!\n","\n","It's time for the formal programmer's ball. Everyone that enters will have their full name announced - and yes, that includes your awesome nickname.\n","\n","Write a program that does the following:\n","\n","* Asks the user for their first name\n","* Asks the user for their last name\n","* Asks the user for their nickname\n","* Presents the user in the following format: `Presenting [First Name] [Nickname] [Last Name]`\n","\n","A successful output should look something like this:\n","\n","```\n","Please enter your first name: Myles\n","Please enter your last name: Smith\n","Please enter your nickname: Smart Guy\n","Presenting Myles Smart Guy Smith\n","```\n"]},{"cell_type":"code","metadata":{"id":"edH_1LI_jsqe","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1598921338203,"user_tz":240,"elapsed":5623,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"94e09a4a-5124-42cd-c746-428eee8eb6da"},"source":["#Asks the user for their first name\n","FirstName = input(\"Please enter your first name: \")\n","#Asks the user for their last name\n","LastName = input(\"Please enter your last name: \")\n","#Asks the user for their nickname\n","NickName = input(\"Please enter your nickname: \")\n","#Presents the user in the following format: Presenting [First Name] [Nickname] [Last Name]\n","print(\"Presenting\",FirstName,NickName,LastName)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Please enter your first name: Jamie\n","Please enter your last name: Smith\n","Please enter your nickname: Cats\n","Presenting Jamie Cats Smith\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yE0xmKS0ztvS","colab_type":"text"},"source":["## 4. All Together Again\n","\n","Let's wrap up by attempting the problem that we had a demo of in lecture.\n","\n","This time, we'll ask the user for their first and last name separately. Then, we'll tell them how many letters are in their first and last name.\n","\n","A successful output should look something like this:\n","\n","```\n","Enter your first name: Carl\n","Enter your last name: Samuel\n","Carl has 4 letters\n","Samuel has 6 letters\n","```"]},{"cell_type":"code","metadata":{"id":"Js66UQvD0JHl","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1598921351326,"user_tz":240,"elapsed":5125,"user":{"displayName":"Jamie Smith","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgeUaQnbZm4nHZ18ceq22WkNO4Ts08330OS57MOZA=s64","userId":"13355235100787861521"}},"outputId":"c33fcfbf-135a-4817-9a95-07cc45cb8688"},"source":["#We'll ask the user for their first and last name separately.\n","FirstName = input(\"Please enter your first name: \")\n","LastName = input(\"Please enter your last name: \")\n","#count the letters\n","FirstLength = len(FirstName)\n","LastLength = len(LastName)\n","#Then, we'll tell them how many letters are in their first and last name.\n","print(FirstName,\"has\",FirstLength,\"letters.\")\n","print(LastName,\"has\",LastLength,\"letters.\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Please enter your first name: Jamie\n","Please enter your last name: Smith\n","Jamie has 5 letters.\n","Smith has 5 letters.\n"],"name":"stdout"}]}]}